// Code generated by "make layers"
// DO NOT EDIT
package {{.Package}}

import (
"context"
"reflect"

"github.com/kamva/hexa"
"github.com/kamva/hexa/pagination"
"go.opentelemetry.io/otel/codes"
"go.opentelemetry.io/otel/trace"
"space.org/space/internal/dto"
apperr "space.org/space/internal/error"
"space.org/space/internal/input"
)

type {{.Name}} struct {
t    trace.Tracer
next  App
}

{{ range $idx, $method := .Interface.Methods -}}
    func (a *{{$.Name}}) {{$method.Name}}({{$method.Params | joinParamsWithType}}) {{joinResultsForSignature $method.Results}} {
    {{- if hasAnnotation $method.Annotations "noTracing" -}}
        return a.next.{{$method.Name}}({{$method.Params | joinParamsWithUnpack}})
    {{- else}}
        if ctx==nil{
            return a.next.{{$method.Name}}({{$method.Params | joinParamsWithUnpack}})
        }

        var span trace.Span
        ctx, span = a.t.Start(ctx, "{{$method.Name}}")
        defer span.End()

        {{$method.Results | genResultsVars}} := a.next.{{$method.Name}}({{$method.Params | joinParamsWithUnpack}})

        {{- if $method.Results | hasErrInResults }}
            {{$errVarName:= $method.Results | errResultVar}}

            if apperr.IsInternalErr({{$errVarName}}){
            span.RecordError({{$errVarName}})
            span.SetStatus(codes.Error, {{$errVarName}}.Error())
            }else{
            span.SetStatus(codes.Ok, "")
            }
        {{- else}}
            span.SetStatus(codes.Ok, "")
        {{- end}}

        return {{ $method.Results | genResultsVars -}}
    {{- end }}
    }
{{end }}


func New{{.Name | title}}(tp trace.TracerProvider, next App) App {
return &{{.Name}}{
t:  tp.Tracer(reflect.TypeOf({{.Name}}{}).PkgPath()),
next: next,
}
}
